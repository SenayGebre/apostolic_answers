// lib/core/logging/logger_provider.dart
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'logger_service.dart';

// Global provider for the logger service
final loggerServiceProvider = Provider<LoggerService>((ref) {
  return LoggerService();
});

// Initialize logger during app startup
Future<void> initializeLogger(ProviderContainer container) async {
  final loggerService = container.read(loggerServiceProvider);
  
  // Determine environment
  final isDebugMode = kDebugMode;
  
  // Get Sentry DSN from secure storage in production
  String? sentryDsn;
  if (!isDebugMode && !kIsWeb) {
    try {
      const secureStorage = FlutterSecureStorage();
      sentryDsn = await secureStorage.read(key: 'SENTRY_DSN');
    } catch (e) {
      debugPrint('Error reading Sentry DSN: $e');
    }
  }
  
  // For web in production, use a different approach
  if (!isDebugMode && kIsWeb) {
    // In web apps, you might use environment variables injected during build
    sentryDsn = const String.fromEnvironment('SENTRY_DSN', defaultValue: '');
    if (sentryDsn.isEmpty) {
      sentryDsn = null;
    }
  }
  
  // Default Sentry DSN for development (don't use a real DSN in development)
  if (isDebugMode) {
    sentryDsn = 'https://examplePublicKey@o0.ingest.sentry.io/0';
  }
  
  // Initialize the logger
  await loggerService.init(
    isDebugMode: isDebugMode,
    sentryEnabled: !isDebugMode, // Only enable Sentry in production
    sentryDsn: sentryDsn,
    minLogLevel: isDebugMode ? LogLevel.debug : LogLevel.info,
  );
}

// lib/core/logging/logger_middleware.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'logger_service.dart';
import 'logger_provider.dart';

// Riverpod observer that logs state changes
class LoggerObserver extends ProviderObserver {
  final LoggerService _logger;
  
  LoggerObserver(this._logger);
  
  @override
  void didUpdateProvider(
    ProviderBase provider,
    Object? previousValue,
    Object? newValue,
    ProviderContainer container,
  ) {
    // Only log in debug mode to avoid performance impact
    if (kDebugMode) {
      _logger.debug(
        'Provider "${provider.name ?? provider.runtimeType}" updated',
        context: 'StateManagement',
        data: {
          'provider': provider.runtimeType.toString(),
          'newValue': newValue.toString(),
        },
      );
    }
  }
  
  @override
  void didAddProvider(
    ProviderBase provider,
    Object? value,
    ProviderContainer container,
  ) {
    // Only log in debug mode
    if (kDebugMode) {
      _logger.debug(
        'Provider "${provider.name ?? provider.runtimeType}" added',
        context: 'StateManagement',
        data: {
          'provider': provider.runtimeType.toString(),
          'value': value.toString(),
        },
      );
    }
  }
  
  @override
  void didDisposeProvider(
    ProviderBase provider,
    ProviderContainer container,
  ) {
    // Only log in debug mode
    if (kDebugMode) {
      _logger.debug(
        'Provider "${provider.name ?? provider.runtimeType}" disposed',
        context: 'StateManagement',
        context: 'StateManagement',
      );
    }
  }
}
