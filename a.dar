// lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logging/logging.dart';
import 'package:your_app_name/app/app.dart';
import 'package:your_app_name/core/logging/app_logger.dart';

void main() {
  // Set up error handling and logging
  WidgetsFlutterBinding.ensureInitialized();
  AppLogger.setupLogging();

  // Capture errors in Riverpod
  final providerContainer = ProviderContainer(
    observers: [
      RiverpodLogger(),
    ],
  );

  // For error reporting in release builds
  FlutterError.onError = (FlutterErrorDetails details) {
    FlutterError.presentError(details);
    // Log to your error reporting service here
    AppLogger.error(
      'Flutter error',
      error: details.exception,
      stackTrace: details.stack,
    );
  };

  runApp(
    UncontrolledProviderScope(
      container: providerContainer,
      child: const BankingApp(),
    ),
  );
}

// A custom observer to log provider state changes during development
class RiverpodLogger extends ProviderObserver {
  @override
  void didUpdateProvider(
    ProviderBase<Object?> provider,
    Object? previousValue,
    Object? newValue,
    ProviderContainer container,
  ) {
    if (previousValue != newValue) {
      AppLogger.debug(
        'Provider ${provider.name ?? provider.runtimeType} updated:\n'
        'prev: $previousValue\n'
        'new: $newValue',
      );
    }
  }

  @override
  void didAddProvider(
    ProviderBase<Object?> provider, 
    Object? value, 
    ProviderContainer container,
  ) {
    AppLogger.debug(
      'Provider ${provider.name ?? provider.runtimeType} added with value: $value',
    );
  }

  @override
  void didDisposeProvider(
    ProviderBase<Object?> provider, 
    ProviderContainer container,
  ) {
    AppLogger.debug(
      'Provider ${provider.name ?? provider.runtimeType} disposed',
    );
  }
}
